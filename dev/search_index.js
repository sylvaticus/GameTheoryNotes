var documenterSearchIndex = {"docs":
[{"location":"02_Nash_equilibrium.html#nash_equilibrium","page":"Nash equilibrium","title":"Best-response strategy and Nash equilibrium","text":"","category":"section"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"In this chapter we define the concept of best response and Nash equilibrium and describe some methods to obtain the Nash equilibria of a given game.","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"# Let Julia activate a specific environment for this course instead of using the global one\nusing Pkg \ncd(@__DIR__)\nPkg.activate(\".\")\nusing LinearAlgebra, StrategicGames\nusing Combinatorics, JuMP, Ipopt, HiGHS","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Given a game in normal form and the (assumed) strategies of all players other than n, indicated as s_-n, the best-response strategy for player n is: s^*_n such that EU(s^*_ns_-n) ge EU(s_ns_-n)   forall  s_n in S_n  that is the (possible mixed) strategy that results in the highest expected utility for player n within all the strategies available to him. A strategy is a strictly best response when it is unique within S_n, i.e. its expected utility, conditional to s_-n, is strictly larger tha any other s_ni. ","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"warning: Warning\nComputationally, due to approximations in computations with float numbers, it is not possible to numerically distinguish between a strict and a weck best response","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Finding the best response for a single player is computationally relativeelly cheap, as it involves solving a linear optimisation problem where we find the strategy that maximises the player's expected payoff subject to the strategy being a discrete probability distribution (i.e. all entries non negative and summing to 1).","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"The problem is implemented in the StrategyGames.best_response(payoff,strategy_profile,player) function. In the example below we want to find the best response for player 2 in the prisoner's dilemma game when the player 1 plays to deny the crime. As you can see the best response is to betray to player 1 and confess.","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"payoff = [(-1,-1) (-3,  0);\n          ( 0,-3) (-2, -2)] # prisoner dilemma (strategy 1 is to deny the crime, 2 is to confess it)\n# This transform a n-players dimensional payoff array of tuples (like `U` in this case)\n# to a n-players+1 dimensional array of scalars (where the additional dimension is relative to the various players)\npayoff_array = expand_dimensions(payoff);\ns1 = [1,0] # player one's strategy is to always deny\ns2 = [1,0] # these are the initial values for player two's strategy (what we are looking for) in the underlying optimisation problem\nbest_response(payoff_array,[s1,s2],2) # (0,1)","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"We can also check if a particular strategy is a best response one with is_best_response(payoff_array,strategy_profile,nplayer):","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"is_best_response(payoff_array,[s1,s2],2)    # false\nis_best_response(payoff_array,[s1,[0,1]],2) # true","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Nash equilibrium The Nash equilibrium is simply the strategy profile(s) formed by only best-response strategies by all players. If all these are strict best responses, we have a strict Nash equilibrium, otherwise we have a weak Nash equilibrium.","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"under the Nash equilibrium each player maximise its expected utility conditional to the other players' action\nnobody that playes the Nash equilibrium has incentive to deviate from it\nif we have a strict Nash equilibrium, this is unique, otherwise may not (the other best response may not form a Nash equilibrium)\nif we allow players only for pure strategies a game may have none, one or multiple Nash equilibrium, but if we allow for mixed-strategies a game with finite number of players and actions will always have at least one Nash equilibrium\nif we allow players only for pure strategies a game may have strict or weak Nash equilibrium(a), but if we allow for mixed-strategies a game with always have weak Nash equilibrium(a)","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"We can check if a particular strategy profile is a Nash equilibrium with is_nash(payoff_array,strategy_profile). This simply check if is_best_response is true for all players:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"is_nash(payoff_array, [s1,s2])       # false\nis_nash(payoff_array, [[0,1],[0,1]]) # true - both players always defect","category":"page"},{"location":"02_Nash_equilibrium.html#Finding-the-Nash-equilibrium","page":"Nash equilibrium","title":"Finding the Nash equilibrium","text":"","category":"section"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"We now convey the topic on how to find the Nash equilibrium. We already saw cases like the prisoner-dilemma where all players have a dominating strategy that doesn't depend from the other players' actions. This is the \"easy\" case, as the \"confess\" is the best-respons strategy for both and hence (confess,confess) is indeed a Nash equilibrium. ","category":"page"},{"location":"02_Nash_equilibrium.html#players-game","page":"Nash equilibrium","title":"2-players game","text":"","category":"section"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Sometimes, when the game is small, we can look at the playoff matrix and directly apply the definition of Nash equilibrium to check if candidate strategies are Nash equilibrium.","category":"page"},{"location":"02_Nash_equilibrium.html#Examples:","page":"Nash equilibrium","title":"Examples:","text":"","category":"section"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"2-players common-payoff game: ","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"p1 \\ p2 A B\nA 4,4 0,0\nB 0,0 6,6","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"It is easy to see that in this game both (AA) than (BB) represent a (weak) Nash equilibrium: given the other strategy, playing the same strategy is in both cases the (reciprocal) best response. Let's try some mixed-strategies.","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Is it s_1 = s_2 = 0505 a Nash equilibrium?","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"U      = [(4,4) (0,0); (0,0) (6,6)]\npayoff = expand_dimensions(U) \ns      = [[0.5,0.5],[0.5,0.5]]\nis_nash(payoff,s) # false","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Let's veryfying it. To verify that a strategy profile is not a Nash equilibrium it is enought to show that one of the player has a better strategy available conditional to the other player(s) playing the given strategy.","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Let's compute the payoff for the two players when they play the given strategy profile and check a different strategy for player 2:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"expected_payoff(payoff,s)                     # (2.5,2.5)\nexpected_payoff(payoff,[[0.5,0.5],[0.4,0.6]]) # (2.6, 2.6) ","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"From the results above we notice that (0.5,0.5) is NOT a Nash equilibrium, player 2 has better respons strategies. I let to you as an exercise to find a better strategy also for player 1 and verifying instead that the two pure strategies (1,0) and (0,1) are indeed Nash equilibria.","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Let't now take another example, the zero-sum game Head or Tail, where the first player wins if the 2 draws of the coin are the same, and player 2 win otherwise. It has the following payoff matrix:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"p1 \\ p2 H T\nH 1,-1 -1,1\nT -1,1 1,-1","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"We can see that this game, contrary to the one before, doesn't have a pure strategy Nash equilibrium: if p1 plays H, p2 should plays T, at which point p1 should change its strategy to T, at which point p2 should change its strategy to H, and so on. Let's see if instead (0.5,0.5) is a mixed-strategy Nash equilibrium.","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"U = [(1,-1) (-1,1); (-1,1) (1, -1)]\npayoff = expand_dimensions(U)\n\nis_nash(payoff,[[1,0],[1,0]]) # false\nis_nash(payoff,[[1,0],[0,1]]) # false\nis_nash(payoff,[[0,1],[0,1]]) # false\nis_nash(payoff,[[0,1],[1,0]]) # false\nis_nash(payoff,[[0.5,0.5],[0.5,0.5]]) # true","category":"page"},{"location":"02_Nash_equilibrium.html#Finding-mixed-strategies-Nash-equilibriums-in-2-2-games","page":"Nash equilibrium","title":"Finding mixed strategies Nash equilibriums in 2 × 2 games","text":"","category":"section"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Let's now take a more comprehensive approach to find Nash equilibrium in playing 2 × 2 games, i.e. 2 players each with 2 possible actions.","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"The trick to find the equilibrium is to consider that each player must have a strategy that make the other one indifferent in terms of his actions, that is that conditional to the first player strategy, the expected utility of player 2 with respect to its own actions must be the same. Otherwise he would not play \"at random\".","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Let's consider the following general payoff and strategies for a 2 × 2 game with mixed strategies:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"p1 \\ p2 A B\nA (u1aa,u2aa) (u1ab,u2ab)\nB (u1ba,u2ba) (u1bb,u2bb)","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"s1 = [p1a,1-p1a] s2 = [p2a,1-p2a]","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Finding p1a:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Player 1 must find a strategy (i.e. p1a) such that:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"E[U]₂(payoff,s1,[1,0]) = E[U]₂(payoff,s1,[0,1])","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"u2aa * p1a + u2ba * (1-p1a) = u2ab * p1a + u2bb * (1-p1a)","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"From which we find that: p1a = (u2bb-u2ba)/(u2aa-u2ba-u2ab+u2bb)","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Finding p2a:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Similarly player 2 must find a strategy (i.e. p2a) such that:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"E[U]₁(payoff,[1,0],s2) = E[U]₁(payoff,[0,1],s2)","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"u1aa * p2a + u1ab * (1-p2a) = u1ba * p2a + u1bb * (1-p2a)","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"From which we find that: p2a = (u1bb-u1ab)/(u1aa-u1ab-u1ba+u1bb)","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Note that the computation of the equilibrium strategy for each player involves the other player utility only.","category":"page"},{"location":"02_Nash_equilibrium.html#Examples","page":"Nash equilibrium","title":"Examples","text":"","category":"section"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"function nash_2by2(payoff::Array{T,3}) where {T}\n    size(payoff) == (2,2,2) || error(\"This function works only with 2 × 2 games\")\n    p1a = (payoff[2,2,2] - payoff[2,1,2]) / (payoff[1,1,2]-payoff[2,1,2] - payoff[1,2,2] + payoff[2,2,2])\n    p2a = (payoff[2,2,1] - payoff[1,2,1]) / (payoff[1,1,1]-payoff[1,2,1] - payoff[2,1,1] + payoff[2,2,1])\n    return [[p1a,1-p1a],[p2a,1-p2a]]\nend\n\n# Head or tail\nU = [(1,-1) (-1,1); (-1,1) (1, -1)]\neq = nash_2by2(expand_dimensions(U)) # [[0.5, 0.5],[0.5,0.5]]\n\n# A biased penalty kick game (kicker - the row player - is more efficient on B)\nU = [(-1,1) (1,-1); (1,-1) (0, 0)]\neq = nash_2by2(expand_dimensions(U)) # [[0.33, 0.66],[0.33,0.66]]\n\n# Battle of the sex\nU = [(2,1) (0,0); (0,0) (1,2)]\neq = nash_2by2(expand_dimensions(U))  # [[0.66,0.33],[0.33,0.66]]","category":"page"},{"location":"02_Nash_equilibrium.html#players,-multiple-actions-game","page":"Nash equilibrium","title":"2 players, multiple actions game","text":"","category":"section"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Going beyond 2x2 games risks to become quickly intractable.","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"There are indeed no known algorithm that can compute Nash Equilibrium in polynomial time with the size of the problem (action space), even more to answer questions like if there is a unique equilibrium, if there is a pareto efficient equilibrium, if an equilibrium whose expected payoff for player n is at least x....  Neverthless, we saw that verify if a given solution (an action profile) is a Nash Equilibrium, is relativelly computationally cheap, and some newest algorithms try to exploit this property.","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Here we present two very different approaches. ","category":"page"},{"location":"02_Nash_equilibrium.html#The-Linear-Complementarity-formulation","page":"Nash equilibrium","title":"The Linear Complementarity formulation","text":"","category":"section"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"The fist one is a Linear Complementarity formulation (LCP), a mathematical programming problem that were origninally solved by Lemke-Howson (1964) using a pivoting procedure. This mathematical problem can today be solved with other methods (the solver emploied by StrategicGames uses the interior point method). Altougth the algorithm has a worst case exponential time with the size of the problem, it remains relativelly fast in practice. The specific equilibrium that is retrieved depends from the initial conditions.","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"The LCP method finds the equilibrium conditions by exploiting a lot what a \"game\" is and the characteristics that a (Nash) equilibrium must have. In algeabric terms for a two-players game the problem corresponds to the following linear problem (except the complementarity conditions that are quadratic):","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"(eq. 1) sum_k in A_2 u_1(a_1^j a_2^k) * s_2^k + r_1^j = U_1^*  forall j in A_1","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"(eq. 2) sum_j in A_1 u_2(a_1^j a_2^k) * s_1^j + r_2^k = U_2^*  forall k in A_2 ","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"(eq. 3) sum_j in A_1 s_1^j = 1  sum_k in A_2 s_2^k = 1","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"(eq. 4) s_1^j geq 0  s_2^k geq 0  forall j in A_1 forall k in A_2","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"(eq. 5) r_1^j geq 0  r_2^k geq 0  forall j in A_1 forall k in A_2","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"(eq. 6) r_1^j * s_1^j =0 r_2^k * s_2^k =0  forall j in A_1 forall k in A_2","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Where u_1 and u_2 are the j times k payoff matrices for the two players (a parameter here), while s_1 s_2 (the strategies for the two players), U_1^* U_2^* (the equilibrium expected utility for any action in the support of the two players) and r_1 r_2 (the so-called \"slack\" variables) are the decision variables of the problem (what we want to find).   ","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Equations 1 and 2 states that, for each of the two players, the expected utility for any possible action, given the strategies of the other player, must be constant, eventually less of a r term, specific for that action and player. The complementary conditions (eq. 6) guarantee that either this r term is zero, or that action has zero probability of being selected by the given player (i.e. it is not in its strategy support). Eq. 3 and 4 simply guarantee that s are PMF (probability mass functions, i.e. discrete distributions, that is non-negative values that sum to 1).","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"We can formulate the problem in Julia as follow:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"using JuMP, Ipopt # The first package is the algeabric language library, the second one is the interior point based solver engine\n\nfunction nash_lcp2players(payoff,init=[fill(1/size(payoff,1), size(payoff,1)),fill(1/size(payoff,2), size(payoff,2))])    \n    nActions = size(payoff)[1:end-1]\n    nPlayers = size(payoff)[end]\n    (length(nActions) == nPlayers) || error(\"Mismatch dimension or size between the payoff tensor and the number of players\")\n    ndims(payoff) == 3 || error(\"This function works with only two players.\")\n    m = Model(Ipopt.Optimizer)\n    set_optimizer_attribute(m, \"print_level\", 0)\n    @variables m begin\n        r1[j in 1:nActions[1] ] >= 0\n        r2[j in 1:nActions[2] ] >= 0\n        u[n in 1:nPlayers]\n    end\n    @variable(m, 0-eps() <= s1[j in 1:nActions[1] ] <= 1,  start=init[1][j])\n    @variable(m, 0-eps() <= s2[j in 1:nActions[2] ] <= 1,  start=init[2][j])\n    @constraints m begin\n        slack1[j in 1:nActions[1]], # either rⱼ or sⱼ must be zero\n            r1[j] * s1[j] == 0\n        slack2[j in 1:nActions[2]], # either rⱼ or sⱼ must be zero\n            r2[j] * s2[j] == 0\n        utility1[j1 in 1:nActions[1] ], # the expected utility for each action must be constant, for each nPlayers\n        sum( payoff[j1,j2,1] * s2[j2] for j2 in 1:nActions[2] ) + r1[j1]  == u[1]\n        utility2[j2 in 1:nActions[2] ], # the expected utility for each action must be constant, for each nPlayers\n        sum( payoff[j1,j2,2] * s1[j1] for j1 in 1:nActions[1] ) + r2[j2]  == u[2]\n        probabilities1,\n            sum(s1[j] for j in 1:nActions[1]) == 1\n        probabilities2,\n            sum(s2[j] for j in 1:nActions[2]) == 1\n    end;\n    @objective m Max u[1] + u[2]\n    optimize!(m)\n    #print(m) # if we want to print the model\n    status = termination_status(m)\n    optStrategies = Vector{Vector{Float64}}()\n    optU          = Float64[]\n    if (status == MOI.OPTIMAL || status == MOI.LOCALLY_SOLVED || status == MOI.TIME_LIMIT) && has_values(m)\n        optStrategies1 = value.(s1)\n        optStrategies2 = value.(s2)\n        optStrategies = [optStrategies1,optStrategies2]\n        optU = value.(u)\n    end\n    return (status=status,equilibrium_strategies=optStrategies,expected_payoffs=optU)\nend","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"We can try it with the same problems we \"solved\" analytically before:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"# Head or tail\nU = [(1,-1) (-1,1); (-1,1) (1, -1)]\neq = nash_lcp2players(expand_dimensions(U))\neq_strategies = eq.equilibrium_strategies # [[0.5, 0.5],[0.5,0.5]]\n\n# A biased penalty kick game (kicker - the row player - is more efficient on B)\nU = [(-1,1) (1,-1); (1,-1) (0, 0)]\neq = nash_lcp2players(expand_dimensions(U))\neq_strategies = eq.equilibrium_strategies # [[0.33, 0.66],[0.33,0.66]]\n\n# Battle of the sex\nU = [(2,1) (0,0); (0,0) (1,2)]\neq = nash_lcp2players(expand_dimensions(U)) \neq_strategies = eq.equilibrium_strategies # [[0.66,0.33],[0.33,0.66]]\n\n# A 2-players game with 2 and 3 actions respectively\nU = [(1,-1) (-1,1) (1,0); (-1,1) (1, -1) (0,1)]\neq = nash_lcp2players(expand_dimensions(U)) \neq_strategies = eq.equilibrium_strategies # [[0.66, 0.33],[0, 0.33, 0.66]]","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"note: Note\nIf you run the code above you will get, due to the computational approximations, sligh different results, e.g. 1.7494232335004063e-20 instead of 0 in the last example","category":"page"},{"location":"02_Nash_equilibrium.html#The-Support-Enumeration-Method","page":"Nash equilibrium","title":"The Support Enumeration Method","text":"","category":"section"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"The support enumeration method works by replacing the complementarity equation of the LCP formulation by working on subproblems that are linear (at least in two players game) given a certain assumed support of the solution profile at the equilibrium, i.e. the sets of actions sigma_1 subset A_1 and sigma_2 subset A_2 that at equilibrium have positive non zero probabilities of being played:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"(eq. 1) sum_k in sigma_2 u_1(a_1^j a_2^k) * s_2^k  = U_1^*  forall j in sigma_1","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"(eq. 1.2) sum_k in sigma_2 u_1(a_1^j a_2^k) * s_2^k  leq U_1^*  forall j notin sigma_1","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"(eq. 2) sum_j in sigma_1 u_2(a_1^j a_2^k) * s_1^j = U_2^*  forall k in sigma_2 ","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"(eq. 2.2) sum_j in sigma_1 u_2(a_1^j a_2^k) * s_1^j leq U_2^*  forall k notin sigma_2 ","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"(eq. 3) sum_j in A_1 s_1^j = 1  sum_k in A_2 s_2^k = 1","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"(eq. 4) s_1^j geq 0  s_2^k geq 0  forall j in sigma_1 forall k in sigma_2","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"(eq. 4.2) s_1^j = 0  s_2^k = 0  forall j notin sigma_1 forall k notin sigma_2","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Where the equations have the same meaning as in the LCP formulation.","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Of course, the problem is now to find which is the correct support of the equilibrium.","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"The Porter & oth. (2004) algorithm exploits a smart heuristic to search through all the possible support sets. It starts by trying small, similar in size supports, to gradually test larger ones and employing a trick named \"conditional domination\" to exclude certain possible supports from the search.","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"To implement in Julia the support enumeration method for two players games let's first implement the optimisation problem conditional to a specific support as described in the equations above:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"using HiGHS # HiGHS is a linear solver engine\n\nfunction nash_on_support_2p(payoff,support= collect.(range.(1,size(payoff)[1:end-1]));solver=\"HiGHS\",verbosity=STD)  \n    #println(\"boo\")\n    verbosity == FULL && println(\"Looking for NEq on support: $support\")\n    nActions = size(payoff)[1:end-1]\n    nPlayers = size(payoff)[end]\n    nPlayers == 2 || error(\"This function works only for 2 players games\")\n    (length(nActions) == nPlayers) || error(\"Mismatch dimension or size between the payoff array and the number of players\")\n    if isempty(support)\n        support = [collect(1:nActions[d]) for d in 1:length(nActions)]\n    end\n    init=[fill(1/size(payoff,1), size(payoff,1)),fill(1/size(payoff,2), size(payoff,2))]\n    m = Model(getfield(eval(Symbol(solver)),:Optimizer))\n    if solver == \"HiGHS\" && verbosity <= STD\n        set_optimizer_attribute(m, \"output_flag\", false)\n    end\n    @variables m begin\n        u[n in 1:2]\n    end\n    @variable(m, 0-eps() <= s1[j in 1:nActions[1] ] <= 1,  start=init[1][j])\n    @variable(m, 0-eps() <= s2[j in 1:nActions[2] ] <= 1,  start=init[2][j])\n    for Σ1 in setdiff(1:nActions[1],support[1])\n        fix(s1[Σ1], 0.0; force=true);\n    end\n    for Σ2 in setdiff(1:nActions[2],support[2])\n        fix(s2[Σ2], 0.0; force=true);\n    end\n    @constraints m begin\n        utility1_insupport[σ1 in support[1]], # the expected utility for each action in the support of player 1 must be constant\n            sum( payoff[σ1,j2,1] * s2[j2] for j2 in 1:nActions[2] )  == u[1]\n        utility1_outsupport[Σ1 in setdiff(1:nActions[1],support[1]) ], # the expected utility for each action not in the support of player 1 must be lower than the costant utility above\n            sum( payoff[Σ1,j2,1] * s2[j2] for j2 in 1:nActions[2] )  <= u[1]\n        utility2_insupport[σ2 in support[2]], # the expected utility for each action in the support of player 2 must be constant\n            sum( payoff[j1,σ2,2] * s1[j1] for j1 in 1:nActions[1] )  == u[2]\n        utility2_outsupport[Σ2 in setdiff(1:nActions[2],support[2])], # the expected utility for each action not in the support of player 2 must be lower than the costant utility above\n            sum( payoff[j1,Σ2,2] * s1[j1] for j1 in 1:nActions[1] )  <= u[2]\n        probabilities1,\n            sum(s1[j] for j in 1:nActions[1]) == 1\n        probabilities2,\n            sum(s2[j] for j in 1:nActions[2]) == 1\n    end\n    @objective m Max u[1] + u[2]\n    if verbosity == FULL\n        println(\"Optimisation model to be solved:\")\n        println(m)\n    end\n    optimize!(m)\n    status = termination_status(m)\n    optStrategies = Vector{Vector{Float64}}()\n    optU          = Float64[]\n    solved = false\n    if (status in [MOI.OPTIMAL, MOI.LOCALLY_SOLVED, MOI.ALMOST_LOCALLY_SOLVED, MOI.ALMOST_OPTIMAL]) && has_values(m)\n        optStrategies1 = value.(s1)\n        optStrategies2 = value.(s2)\n        optStrategies = [optStrategies1,optStrategies2]\n        optU = value.(u)\n        solved = true\n    elseif (status in [MOI.LOCALLY_INFEASIBLE, MOI.INFEASIBLE, MOI.ALMOST_DUAL_INFEASIBLE, MOI.ALMOST_DUAL_INFEASIBLE,MOI.INFEASIBLE_OR_UNBOUNDED, MOI.DUAL_INFEASIBLE])\n        solved = false\n    else\n        if verbosity >= STD\n            warn(\"The feasibility check for support $support returned neither solved neither unsolved ($status). Returning no Nash equilibrium for this support.\")\n        end\n        solved = false\n    end\n    return (status=status,equilibrium_strategies=optStrategies,expected_payoffs=optU,solved)\nend","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Now let's implement a function that returns the dominated strategies (if any) for a given player:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"function dominated_strategies_2p(payoff,player)\n    nPlayers = size(payoff)[end]\n    nPlayers == 2 || error(\"This function supports only 2 players\")\n    payoff_n = selectdim(payoff,nPlayers+1,player)\n    dominated = Int64[]\n    if player == 1\n        for (ridx,r) in enumerate(eachrow(payoff_n))\n            for r2 in eachrow(payoff_n)\n                if all(r2 .> r) # r2 strictly dominates r1 \n                    push!(dominated,ridx)\n                    break\n                end\n            end\n        end\n    else\n        for (cidx,c) in enumerate(eachcol(payoff_n))\n            for c2 in eachcol(payoff_n)\n                if all(c2 .> c) # c2 strictly dominates c1 \n                    push!(dominated,cidx)\n                    break\n                end\n            end\n        end\n    end\n    return dominated\nend","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"Finally we are in the position to implement the support enumeration method. Note that in this version we can ask the algorithm to retrieve one or all the equilibria and if we want to restrict ourselves to only pure Nash equilibria:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"using Combinatorics\n\n\"\"\"\n    nash_se2(payoff; allow_mixed=true, max_samples=1, verbosity=STD)\n\nSolves Nash eqs using support enumeration for 2 players game using strictly the approach of [Porter-Nudelman-Shoham (2008)](https://doi.org/10.1016/j.geb.2006.03.015)\n\"\"\"\nfunction nash_se2(payoff; allow_mixed=true, max_samples=Inf, verbosity=STD)\n    nActions = size(payoff)[1:end-1]\n    nPlayers = size(payoff)[end]\n    nPlayers == 2 || error(\"This function works only for 2 players games\")\n    nSupportSizes = allow_mixed ? prod(nActions) : 1\n    eqs = NamedTuple{(:equilibrium_strategies, :expected_payoffs, :supports), Tuple{Vector{Vector{Float64}}, Vector{Float64},Vector{Vector{Int64}}}}[]\n    support_sizes = Matrix{Union{Int64,NTuple{nPlayers,Int64}}}(undef,nSupportSizes,3) # sum, diff, support sizes\n    if allow_mixed\n        i = 1\n        for idx in CartesianIndices(nActions)\n            support_sizes[i,:] = [sum(Tuple(idx)),maximum(Tuple(idx))-minimum(Tuple(idx)),Tuple(idx)] \n            i += 1\n        end\n    else\n        support_sizes[1,:] = [nPlayers,0,(ones(Int64,nPlayers)...,)]\n    end\n    support_sizes = sortslices(support_sizes,dims=1,by=x->(x[2],x[1]))\n \n    for support_size in eachrow(support_sizes)\n        for S1 in combinations(1:nActions[1],support_size[3][1])\n            A2 = setdiff(1:nActions[2],dominated_strategies_2p(payoff[S1,:,:],2))\n            if !isempty(dominated_strategies_2p(payoff[S1,A2,:],1))\n                continue\n            end\n            for S2 in combinations(A2,support_size[3][2])\n                if !isempty(dominated_strategies_2p(payoff[S1,S2,:],1))\n                        continue\n                end\n                eq_test =  nash_on_support_2p(payoff,[S1,S2],verbosity=verbosity)\n                if eq_test.solved\n                        push!(eqs,(equilibrium_strategies=eq_test.equilibrium_strategies, expected_payoffs=eq_test.expected_payoffs,supports=[S1,S2]))\n                        if length(eqs) == max_samples\n                            return eqs\n                        end\n                end\n            end\n        end \n    end\n    return eqs\nend","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"We can try the support enumeration method on the same problems:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"# Head or tail\nU = [(1,-1) (-1,1); (-1,1) (1, -1)]\neqs = nash_se2(expand_dimensions(U))\neq_strategies = eqs[1].equilibrium_strategies # [[0.5, 0.5],[0.5,0.5]]\n\n# A biased penalty kick game (kicker - the row player - is more efficient on B)\nU = [(-1,1) (1,-1); (1,-1) (0, 0)]\neqs = nash_se2(expand_dimensions(U))\neq_strategies = eqs[1].equilibrium_strategies # [[0.33, 0.66],[0.33,0.66]]\n\n# Battle of the sex (with 3 equilibria)\nU = [(2,1) (0,0); (0,0) (1,2)]\neqs = nash_se2(expand_dimensions(U)) \neq_strategies1 = eqs[1].equilibrium_strategies # [[1,0],[1,0]]\neq_strategies2 = eqs[2].equilibrium_strategies # [[0,1],[0,1]]\neq_strategies3 = eqs[3].equilibrium_strategies # [[0.66,0.33],[0.33,0.66]]\n\n# A 2-players game with 2 and 3 actions respectively\nU = [(1,-1) (-1,1) (1,0); (-1,1) (1, -1) (0,1)]\neqs = nash_se2(expand_dimensions(U)) \neq_strategies = eqs[1].equilibrium_strategies # [[0.66, 0.33],[0, 0.33, 0.66]]","category":"page"},{"location":"02_Nash_equilibrium.html#Multiple-players-game","page":"Nash equilibrium","title":"Multiple players game","text":"","category":"section"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"The algorithms in the section above can be generalised to work with generic N players, altought in most cases the optimisation problem will be no longer linear.  All functions in the StrategicGames package have been extended to work with N players, where each player can have a different actions space. In particular the nash_cp(payoff;init) and nash_se(payoff;allow_mixed, max_samples) functions retrieve a/the Nash equilibria for all standard form games (subject to enought computational resources).","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"For example:","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"# This example is taken from https://www.youtube.com/watch?v=bKrwQKUT0v8 where it is analytically solved\nU = [(0,0,0) ; (3,3,3) ;; (3,3,3) ; (2,2,4) ;;;\n     (3,3,3) ; (2,4,2) ;; (4,2,2) ; (1,1,1) ;;;]\neq = nash_cp(expand_dimensions(U))\neq_strategies = eq.equilibrium_strategies\np = -1 + sqrt(10)/2 # approximatively 0.58\neq_strategies ≈ [[p,1-p],[p,1-p],[p,1-p]] # true\n\neqs = nash_se(expand_dimensions(U),max_samples=Inf)\nn_eqs = length(eqs) # 7\neq_strategies1 = eqs[1].equilibrium_strategies # [[0,1],[1,0],[1,0]]\neq_strategies2 = eqs[2].equilibrium_strategies # [[1,0],[0,1],[1,0]]\neq_strategies3 = eqs[3].equilibrium_strategies # [[1,0],[1,0],[0,1]]\neq_strategies4 = eqs[4].equilibrium_strategies # [[0.25,0.75],[0.25,0.75],[1,0]]\neq_strategies5 = eqs[5].equilibrium_strategies # [[0.25,0.75],[1,0],[0.25,0.75]]\neq_strategies6 = eqs[6].equilibrium_strategies # [[1,0],[0.25,0.75],[0.25,0.75]]\neq_strategies7 = eqs[7].equilibrium_strategies # [[0.58, 0.42][0.58, 0.42],[0.58, 0.42]]","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"<div id=\"pd_rating_holder_8962705\"></div>\n<script type=\"text/javascript\">\nconst pageURL = window.location.href;\nPDRTJS_settings_8962705 = {\n\"id\" : \"8962705\",\n\"unique_id\" : \"/home/runner/work/GameTheoryNotes/GameTheoryNotes/srcPages/02_Nash_equilibrium.md\",\n\"title\" : \"02_Nash_equilibrium.md\",\n\"permalink\" : pageURL\n};\n</script>","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"<div class=\"addthis_inline_share_toolbox\"></div>","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"<script src=\"https://utteranc.es/client.js\"\n        repo=\"sylvaticus/GameTheoryNotes\"\n        issue-term=\"title\"\n        label=\"💬 website_comment\"\n        theme=\"github-dark\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"<script type=\"text/javascript\" charset=\"utf-8\" src=\"https://polldaddy.com/js/rating/rating.js\"></script>","category":"page"},{"location":"02_Nash_equilibrium.html","page":"Nash equilibrium","title":"Nash equilibrium","text":"<!-- Go to www.addthis.com/dashboard to customize your tools -->\n<script type=\"text/javascript\" src=\"//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-6256c971c4f745bc\"></script>","category":"page"},{"location":"01_Basic_concepts.html#basic_concepts","page":"Basic concepts","title":"Basic concepts","text":"","category":"section"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"In this unit we will introduce the main terminology, the concepts of Mixed strategies and equilibrium, in particular the Nash equilibrium.","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"As we will use Julia to explain the concepts, let's first set up some stuff, like working on a environment specific for these notes instead of using a global environment. We'll do this at the beginning of each chapter. If you need help in setting up or using Julia you can refer to my tutorial here.","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"using Pkg \nusing Test # hide\ncd(@__DIR__)\nPkg.activate(\".\")\n# And let's install the companion package \"StrategicGames\" from https://github.com/sylvaticus/StrategicGames.jl\nPkg.add(\"StrategicGames\")\nusing LinearAlgebra, StrategicGames","category":"page"},{"location":"01_Basic_concepts.html#Basic-definitions","page":"Basic concepts","title":"Basic definitions","text":"","category":"section"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"Utility function:","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"a mapping from a certain state of the world to a real number interpreted as measure of agent's happiness or satisfation\nit allows quantify preferences against different alternatives\nstrictly speaking utility is an ordinal measure, not a cardinal one. When we apply an affine transformation (i.e. linear with eventually a constant, like y = ax+c) to the inputs of the utility function the ranking of the preferences doesn't change. As well the comparition of utilities between different agents doesn't change (if the utility of agent 1 was higher than those of agent 2 and we apply an affine transformation to the inputs, e.g. we change the measure units, the utility of agent 1 remains higher than those of agent 2).","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"Game :","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"the situation arising from the interaction of multiple utility maximising agents ","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"Noncooperative game:","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"when the modelling unit is the (utility maximising) individual","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"Coalitional or cooperative games:","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"when the modelling unit is the group","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"Normal form game:","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"a game situation where each players play at the same time (no time dimension) and states of the word (utilities) depends only from the combined actions of all the players, without stochasticity (there could still be stochasticity in the choice of making decisions by the players)","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"Bayesian game:","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"when the state of the world depends on stochasticity other than the players combined actions","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"Extensive-form games:","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"include a timing dimension t that precises the order of the actions taken by the various players\nit becomes relevant the degree of information that the agents know at the times of making decisions  ","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"A (finite, N-person) normal-form game is characterized by the following elements:","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"N\nis a finite (ordered) set of players indexed by n\nA_n\nis the (ordered) set of actions available to player n. Each player can have different actions available (including in different number). The total possible states of the world correspond to all the possible actions that all the N players can take and it is given by the N-dimensional array A of size (length(A_1)length(A_2)length(A_n). Note that as there isn't any stocasticity here, there is no distintion between a given set of actions and the resulting state of the world.\nU\nis the utility levels associated to each corresponding state of the word, aka pay-off matrix (\"array\" would be a more appropriate word). This is a N+1 dimensional array of size (length(A_1)length(A_2)length(A_n)N. The last dimension has size N, as each player has its own utility functions of the various states of the world. Alternatively, U can be represented as a N dimensional array of tuples representing each the utility of the various players for the given state of the world.","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"tip: Tip\nThe StrategicGames package has a convenient function expand_dimensions(A) to pass from a N dimensional array of tuples in a N+1 dimensional array of scalars","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"We can further define:","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"S_n\nthe (infinite) set of all the discrete probability functions that agent n may want to use over its set of available actions A_n in order to stocastically determine its action. Each individual probability distribution s_ni is called strategy. Strategies s_ni with a single action with non-zero probabilities are called pure strategies, while strategies with more than one available action assigned non-zero probabilities are called mixed strategies and strategies with non zero probabilities for all actions are named fully mixed straegies. The (sub)set of actions assigned non-zero probabilities is called support of the given strategy. We indicate with s_n the strategy (PDF) emploied by player n and with s the strategy profile, the set of all particular strategies applied by all the individual players.\na_length(A_1)length(A_2)length(A_n)\nare the individual states of the world (the elements of the A array) derived by the combined actions of all the 12N players. These are also called an action profile.\nEU(s_ni)\nThe expected utility by player n by employing strategy s_ni. Knowing (or assuming) the strategies emploied by the other players, the expected utility of a given strategy i for player n can be computed as sum_a in A U_n(a) prod_j=1^N s_j(a) that is it, for each state of the world a we compute the probability (using the multiplication rule) that it arises using the strategies of all the players, including the one specific we are evaluating (i of player n), and we multiply it by the utility this state provides to player n and we finally sum all this \"possible\" state to retrieve the expected value. ","category":"page"},{"location":"01_Basic_concepts.html#Interpretation-of-mixed-strategies-equilibrium","page":"Basic concepts","title":"Interpretation of mixed-strategies equilibrium","text":"","category":"section"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"What does a mixed-strategy represents? Why should it be used ?","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"Confuse the opponent. In many competitive games (like the Head or Tail one) apply a pure strategy would imply the other player be able to exploit to its own advantage. It is only by applying a random (i.e. mixed) strategy that the opponent can't exploit your strategy\nUncertainty over other players' strategies. Under this interpretation, a mixed strategy of a given player is the assessment of all other players concerning how likely are his pure strategies taken individually. Further, every action in the support of a mixed strategy in a Nash equilibrium is a best response to the player beliefs about the other players’ strategies. \nEmpirical frequency. The entry of each action in a mixed strategy is the relative count on how often that action would be emploied in repeated games by the same players or with a different players selected at random from a hypothetical \"player population\"","category":"page"},{"location":"01_Basic_concepts.html#Examples","page":"Basic concepts","title":"Examples","text":"","category":"section"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"N = 3            # 3 players\nA = [3,2,2]      # 3, 2,and 2 actions available for players 1,2,3 respectively\nU = rand(A...,N) # pay-off array\na = (2,1,2)      # one particular state of the world (action profile)\nU[a...,2]        # The utility for player 2 associated to this particular state of the world - note that we select \"2\" on the last dimension\n\ns1 = [0.5,0.3,0.2] # One particular mixed-strategy emploied by player 1\ns2 = [0,1]         # One particular pure-strategy emploied by player 2\ns3 = [0.5,0.5]     # One particular mixed-strategy emploied by partner 3\n\ns = [s1,s2,s3]     # A strategy profile\n\n# Expected utilities for the 3 players under strategy profile s:\nexpected_utility = [sum(U[i1,i2,i3,n] * s[1][i1] * s[2][i2] * s[3][i3] for i1 in 1:A[1], i2 in 1:A[2], i3 in 1:A[3]) for n in 1:N]\nexpected_utility = StrategicGames.expected_payoff(U,s) # equivalent from the library package\n","category":"page"},{"location":"01_Basic_concepts.html#Particular-types-of-games","page":"Basic concepts","title":"Particular types of games","text":"","category":"section"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"Common-playoff games:","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"a type of game where, for each action profile, all players derive the same utility \na \"pure coordination\" game: the players have no conflict interest and the only \"difficulty\" is for them to coordinate to get the maximum benefits","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"Zero-sum games (aka \"constant-sum\" games):","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"a 2-players type of game where the sum of the utility for the 2 players for each action profile is constant\na \"pure competition\" game, as if one action profile bring some additional advantage than the constant for the first player, this must be at the expenses of the other player \nas games are insensible to affine transformations, this constant isn't restricted to be zero, it can be any constant value","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"Prisoner-dilemma games:","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"a classical 2-actions, 2-players game with:\na pay-off structure like:\np1 \\ p2 A B\nA a,a b,c\nB c,b d,d\nwhere the first element in the tuple of each action profile (cell) represents the utility for player 1 (row player) and the second element the utility for player 2 (column player)\na numerical evaluation of abcd such that c  a, d  b and a  d, that is c  a  d  b","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"This game is partially cooperative and partially competitive. It can be seen that for each player, whatever the other player playes, it is always better to play B (for example for player 1, if player 2 plays A, c is higher than a, and if player 2 plays B, d is higher than b). The action B then dominates the other one for both the players even if they could coordinate they would be both better off by both choosing A. In other words, as everyone behaves as free rider, the best feasible state is never reached. This is a frequent situation in economics in relation to the production of public goods: everyone wants to share the benefit from it, but nobody wants to bring the costs of their production.","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"The name derives from the original situation used to illustrate the case, of two prigioniers that can choose to deny their common crime they are accused (A) or confess to the authority (B), where if one alone confesses, he get free of prison (c) but the other get a harsh prison term (b); if both confess they get a standard prison term (d) and if they both deny they got a mild prison term (a). The outcome of the game is that it is rational for both of them to confess !","category":"page"},{"location":"01_Basic_concepts.html#Examples-2","page":"Basic concepts","title":"Examples","text":"","category":"section"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"A common pay-off game with 2 actions for the first player and 3 actions for the second player:","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"p1 \\ p2 A B C\nA 1,1 2,2 3,3\nB 4,4 5,5 6,6","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"A constant-sum pay-off  game with 2 actions for the first player and 3 actions for the second player:","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"p1 \\ p2 A B C\nA 1,3 5,2 3,1\nB 4,0 5,-1 6,-2","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"A prisoner-dilemma problem:","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"p1 \\ p2 Deny Confess\nDeny -1,-1 -3,0\nConfess 0,-3 -2,-2","category":"page"},{"location":"01_Basic_concepts.html#Pareto-optimality-of-a-state-of-the-world","page":"Basic concepts","title":"Pareto optimality of a state of the world","text":"","category":"section"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"When we put ourself as an outside observer we would like a criteria to decide which outomes are better than others. Under the pareto optimal criteria (bear in mind that economists prefer to use the word \"efficient\" rather than \"optimal\") a given strategy profile is optimal if there could not be a player that could be made better off from the resulting (expected) state of the world without another player being made worst, that is there are no pareto-dominated strategy profile where at least one player could improve its expected utility without the other loose anything under another strategy profile.","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"Pareto efficient solutions are not unique. They form instead a \"frontier\" of the utilities that the game can bring to the players.","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"In the figure below the two axis refer to the expected utilities for players 1 and 2, red points (abc) refer to Pareto dominated strategy profiles; green points def, leaning on the efficient frontier, are Pareto optimal strategies and grey points gh are simply points impossible to obtain in the given game.   ","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"(Image: pareto)","category":"page"},{"location":"01_Basic_concepts.html#Example","page":"Basic concepts","title":"Example","text":"","category":"section"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"The following table provides the expected utility for a 3-players game, each with two pure actions, and show which of them are on the frontier on the last column:","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"Str. profile Player1 Player 2 Player 3 Optimal\nA,D,F 6 4 10 \nA,D,G 2 14 5 *\nA,E,F 4 4 4 \nA,E,G 8 8 8 *\nB,D,F 4 12 5 *\nB,D,G 7 8 1 \nB,E,F 12 2 1 *\nB,E,G 6 6 10 *","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"We can see that this game has 5 Pareto-optimal strategy profiles. The (ADF) strategy is instead dominated by the (BEG) one, the (AEF) strategy is dominated by the (ADF), (AEG), (BDF) and (BEG) ones and finally the (BDG) strategy is dominated by the (AEG) one.","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"The prisoner-dilemma is an interesting example of how the equilibrium outcome (confess, confess) is the only Pareto-dominated outcome of the game. ","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"<div id=\"pd_rating_holder_8962705\"></div>\n<script type=\"text/javascript\">\nconst pageURL = window.location.href;\nPDRTJS_settings_8962705 = {\n\"id\" : \"8962705\",\n\"unique_id\" : \"/home/runner/work/GameTheoryNotes/GameTheoryNotes/srcPages/01_Basic_concepts.md\",\n\"title\" : \"01_Basic_concepts.md\",\n\"permalink\" : pageURL\n};\n</script>","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"<div class=\"addthis_inline_share_toolbox\"></div>","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"<script src=\"https://utteranc.es/client.js\"\n        repo=\"sylvaticus/GameTheoryNotes\"\n        issue-term=\"title\"\n        label=\"💬 website_comment\"\n        theme=\"github-dark\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"<script type=\"text/javascript\" charset=\"utf-8\" src=\"https://polldaddy.com/js/rating/rating.js\"></script>","category":"page"},{"location":"01_Basic_concepts.html","page":"Basic concepts","title":"Basic concepts","text":"<!-- Go to www.addthis.com/dashboard to customize your tools -->\n<script type=\"text/javascript\" src=\"//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-6256c971c4f745bc\"></script>","category":"page"},{"location":"index.html#GameTheoryNotes","page":"Index","title":"GameTheoryNotes","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Student's note on Game Theory, mainly from the Stanford University and The University of British Columbia\" Coursera Game Theory\" (Jackson, Leyton-Brown & Shoham) MOOC ","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"These student's notes use Julia snippets to make more concrete or verify the theoretical concepts. \"Polished\" implementation of these snippets are in the companion repository StrategicGames, a Julia package to analyse strategic games using Game Theory.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Disclaimer: The following notes are a mesh of my own notes, selected transcripts, some useful forum threads and various course material. I do not claim any authorship of these notes, but at the same time any error could well be arising from my own interpretation of the material.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Contributions are really welcome. If you spot an error, want to specify something in a better way (English is not my primary language), add material or just have comments, you can clone, make your edits and make a pull request (preferred) or just open an issue.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Index","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Basic concepts: Overview and definitions\nBest-response strategy and Nash equilibrium: The concepts of best-response strategy and Nash equilibrium and how to retrieve it","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Cite as","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Antonello Lobianco (2023), Game Theory notes with implementations in the Julia programming language, https://doi.org/10.5281/zenodo.7760509   ","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"<div id=\"pd_rating_holder_8962705\"></div>\n<script type=\"text/javascript\">\nconst pageURL = window.location.href;\nPDRTJS_settings_8962705 = {\n\"id\" : \"8962705\",\n\"unique_id\" : \"/home/runner/work/GameTheoryNotes/GameTheoryNotes/srcPages/index.md\",\n\"title\" : \"index.md\",\n\"permalink\" : pageURL\n};\n</script>","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"<div class=\"addthis_inline_share_toolbox\"></div>","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"<script src=\"https://utteranc.es/client.js\"\n        repo=\"sylvaticus/GameTheoryNotes\"\n        issue-term=\"title\"\n        label=\"💬 website_comment\"\n        theme=\"github-dark\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"<script type=\"text/javascript\" charset=\"utf-8\" src=\"https://polldaddy.com/js/rating/rating.js\"></script>","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"<!-- Go to www.addthis.com/dashboard to customize your tools -->\n<script type=\"text/javascript\" src=\"//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-6256c971c4f745bc\"></script>","category":"page"}]
}
